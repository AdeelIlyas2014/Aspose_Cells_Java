<?xml version="1.0" encoding="utf-8"?>
<Data>
  <Folders>
    <Folder>
      <Title>Programmers Guide</Title>
      <Description>Programmers Guide provides code samples about key programming concepts to build .NET and other applications that use Aspose.Cells for .NET</Description>
      <FolderName>ProgrammersGuide</FolderName>
      <Order>1</Order>
      <Folders>
        <Folder>
          <Title>Aspose.Cells</Title>
          <Description>This section includes examples related to the following topics: 

- Introduction of Aspose.Cells for .NET
- Working with Files
- Working with Worksheets
- Working with Rows and Columns
- Working with Data
- Working with Data Formatting
- Working with Tables
- Working with Formulas
- Creating Charts
- Working with Other Drawing Objects
- Working with Pivot Tables
- Working with CellsHelper Methods
- Advanced Topics
- Utilize Aspose.Cells in other Programming Languages</Description>
          <FolderName>AsposeCells</FolderName>
          <Order>1</Order>
          <Folders>
            <Folder>
              <Title>Working With Files</Title>
              <Description>Contains examples for file handling and utility features.</Description>
              <FolderName>WorkingWithFiles</FolderName>
              <Order>1</Order>
              <Folders>
                <Folder>
                  <Title>Utility Features</Title>
                  <Description>Includes Examples for Rendering/Conversion to other formats, Managing Document Properties and Encryption of Documents etc.</Description>
                  <FolderName>UtilityFeatures</FolderName>
                  <Order>1</Order>
                  <Examples>
                    <Example>
                      <Title>Excel to PDF Conversion</Title>
                      <Description>Aspose.Cells for .NET supports conversion from spreadsheets to PDF independently of other software. Save an Excel file to PDF using the Workbook class' Save method. The Save method provides the SaveFormat.Pdf enum member that converts the native Excel files to PDF format.</Description>
                      <FolderName>Excel2PDFConversion</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Converting to PDF Files</DisplayName>
                        <Url>Converting+to+PDF+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\outBook1.pdf</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Chart To Image</Title>
                      <Description>Example to convert charts in Excel files to images. This helps to present data in an easy to read and easy to maintain way for users.</Description>
                      <FolderName>ChartToImage</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Converting Chart to Image</DisplayName>
                        <Url>Converting+Chart+to+Image</Url>
                      </DocLink>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Chart.emf</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Worksheet to Image</Title>
                      <Description>Aspose.Cells supports converting Excel worksheets to images. To use this feature, you need to import the Aspose.Cells.Rendering namespace to your program or  and use ToImage method, that can convert a worksheet to image file(s) with different attributes or options.</Description>
                      <FolderName>WorksheetToImage</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Converting Worksheet to Image</DisplayName>
                        <Url>Converting+Worksheet+to+Image</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\MyTestBook1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\SheetImage.jpg</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Converting to XPS</Title>
                      <Description>The XPS document format consists of structured XML markup that defines the layout of a document and the visual appearance of each page, along with rendering rules for distributing, archiving, rendering, processing and printing the documents. Notably, the markup language for XPS is a subset of XAML, allowing it to incorporate vector-graphic elements in documents, using XAML to mark up the Windows Presentation Foundation (WPF) primitives. The elements used are described in terms of paths and other geometrical primitives.
An XPS file is in fact a Unicoded ZIP archive using the Open Packaging Conventions, containing the files which make up the document. These include an XML markup file for each page, text, embedded fonts, raster images, 2D vector graphics, as well as the digital rights management information. The contents of an XPS file can be examined simply by opening it in an application which supports ZIP files.

You might require to convert Excel files to XPS files. Since the release of v6.0.0, Aspose.Cells supports Excel-to-XPS feature.</Description>
                      <FolderName>ConvertingToXPS</FolderName>
                      <Order>4</Order>
                      <DocLink>
                        <DisplayName>Converting to XPS</DisplayName>
                        <Url>Converting+to+XPS</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\out_printingxps.xps</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\out_whole_printingxps.xps</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Managing Document Properties</Title>
                      <Description>Microsoft Excel provides a feature to add some properties to the Excel files. These document properties allow some useful information to be stored along with the documents (Excel files). There are two kinds of document properties as follows:

- System Defined (Built-in) Properties
- User Defined (Custom) Properties

Built-in properties contain general information about the document like document title, author's name, document statistics and so on. Custom properties are those ones, which are defined by the users as Name/Value pairs, where both name and value are defined by the user. The most important point to know about the built-in and custom properties is that built-in properties can be accessed and modified only but not created or removed because these properties are system defined. However, custom properties can be created and managed freely by the developers because these properties are defined by the users.</Description>
                      <FolderName>ManagingDocumentProperties</FolderName>
                      <Order>5</Order>
                      <DocLink>
                        <DisplayName>Managing Document Properties</DisplayName>
                        <Url>Managing+Document+Properties</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Test_Workbook.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Test_Workbook_RemovedProperty.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Encrypting Files</Title>
                      <Description>Microsoft Excel (97 - 2007) enables you to encrypt / password protect your spreadsheets. It utilizes algorithms provided by Crypto Service Provider. A Crypto Service Provider or CSP is a set of cryptographic algorithms with different properties. The default CSP is "Office 97/2000 Compatible" or "Week Encryption (XOR)". It's also important to choose a proper encryption key length. Some of the Crypto Service Providers don't support more than 40 or 56 bits. That's considered to be a weak encryption type. But, for strong encryption type, a minimum key length of 128 bits is required. Microsoft Windows contains Crypto Service Providers that offer strong encryption types as well, for example the 'Microsoft Strong Cryptographic Provider'. To give an idea, 128 bits encryption is what banks use to encrypt the connection with their Internet Banking systems. Aspose.Cells allows you to encrypt / password protect your excel files with your desired encryption type.

This example shows how you can encrypt / password protect an excel file using the Aspose.Cells API.</Description>
                      <FolderName>EncryptingFiles</FolderName>
                      <Order>6</Order>
                      <DocLink>
                        <DisplayName>Encrypting Files</DisplayName>
                        <Url>Encrypting+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\encryptedBook1.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Converting Worksheet to SVG</Title>
                      <Description>SVG stands for Scalable Vector Graphics. SVG is a specification based on XML standards for two-dimensional vector graphics. It is an open standard that has been under development by the World Wide Web Consortium (W3C) since 1999.
Since the release of v7.1.0, Aspose.Cells can convert worksheets into SVG images.

To use this feature, you need to import the Aspose.Cells.Rendering namespace to your program or project. It has several valuable classes for rendering and printing, for example SheetRender, ImageOrPrintOptions, WorkbookRender and others. 

The Aspose.Cells.Rendering.ImageOrPrintOptions class specifies that the worksheet will be saved in SVG format.

The Aspose.Cells.Rendering.SheetRender class takes the object of ImageOrPrintOptions as a parameter. It has an overloaded method, ToImage, that converts a worksheet to SVG format.</Description>
                      <FolderName>ConvertingWorksheetToSVG</FolderName>
                      <Order>7</Order>
                      <DocLink>
                        <DisplayName>Converting Worksheet to SVG</DisplayName>
                        <Url>Converting+Worksheet+to+SVG</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Template.xlsx</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Template.xlsxSheet10.out.svg</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Template.xlsxSheet20.out.svg</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Converting to MHTML Files</Title>
                      <Description>MHTML combines normal HTML with external resources (that is, content that is usually linked in like images, animations, audio and so on) into one file. They are used for emails with the .mht file extension.
Aspose.Cells supports reading and writing MHTML files.</Description>
                      <FolderName>ConvertingToMHTMLFiles</FolderName>
                      <Order>8</Order>
                      <DocLink>
                        <DisplayName>Converting to MHTML Files</DisplayName>
                        <Url>http://www.aspose.com/docs/display/cellsjava/Converting+to+MHTML+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xlsx</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xlsx.out.mht</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
                <Folder>
                  <Title>File Handling Features</Title>
                  <Description>This section includes examples related to following topics: 

- Opening Files
- Saving Files
- Save Entire Workbook into Text or CSV Format</Description>
                  <FolderName>FileHandlingFeatures</FolderName>
                  <Order>2</Order>
                  <Examples>
                    <Example>
                      <Title>Opening Files</Title>
                      <Description>Developers can make use of Aspose.Cells to open existing files for different purposes. For example, you can open an existing file to retrieve data from it or you can use a pre-defined Designer Spreadsheet file to speed up your development process etc. Aspose.Cells allows developers to open different kinds of source files. These source files can be Excel reports (XLS, XLSX, XLSM, XLSB etc.), SpreadsheetML, CSV or Tab Delimited files. In this example, we will show how opening of these different kinds of source files is performed using Aspose.Cells.</Description>
                      <FolderName>OpeningFiles</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Opening Files</DisplayName>
                        <Url>Opening+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xlsx</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book_Excel2007.xlsx</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book2.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book_Excel97_2003.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book3.xml</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book_CSV.csv</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book1TabDelimited.txt</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\encryptedBook.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Save Entire Workbook into Text or CSV Format</Title>
                      <Description>Sometimes, you want to convert/save the entire workbook with multiple worksheets into text format. For text formats (e.g Txt, Tab Delimited, CSV etc), by default both Ms-Excel and Aspose.Cells save the contents of active worksheet only.</Description>
                      <FolderName>SaveWorkbookToTextCSVFormat</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Save Entire Workbook into Text or CSV Format</DisplayName>
                        <Url>Save+Entire+Workbook+into+Text+or+CSV+Format</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\out.txt</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Saving Files</Title>
                      <Description>Aspose.Cells allows developers to create Excel files from scratch using its flexible API. Once you create Excel files, you would also need to save your workbook (file). Aspose.Cells provides a variety of ways to save these files. In this topic, we will discuss all those possible ways that can be adopted by developers to save their files.</Description>
                      <FolderName>SavingFiles</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Saving Files</DisplayName>
                        <Url>http://www.aspose.com/docs/display/cellsjava/Saving+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\book.default.out.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\book.out.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\book.out.xlsx</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\book.out.xml</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
              </Folders>
            </Folder>
            <Folder>
              <Title>Working with Worksheets</Title>
              <Description>This section includes examples related to the following topics: 

- Management Features
- Display Features
- Security Features
- Page Setup Features
- Value Features</Description>
              <FolderName>WorkingWithWorksheets</FolderName>
              <Order>2</Order>
              <Folders>
                <Folder>
                  <Title>Display Features</Title>
                  <Description>This Section includes examples related to following topics: 

- Hide or Unhide a Worksheet
- Display or Hide Tabs
- Display or Hide Scroll Bars
- Display or Hide Gridlines
- Display or Hide Row Column Headers
- Page Break Preview
- Zoom Factor
- Freeze Panes
- Split Panes</Description>
                  <FolderName>DisplayFeatures</FolderName>
                  <Order>1</Order>
                  <Examples>
                    <Example>
                      <Title>Hide or Unhide a Worksheet</Title>
                      <Description>An Excel file can have one or more than one worksheets. Whenever we create an Excel file, we add worksheets to the Excel file in which we work. Each worksheet in an Excel file is independent from the other worksheet by having its own data and formatting settings etc. Sometimes, developers may require to make few worksheets hidden and others visible in the Excel file for their own interest. So, Aspose.Cells allows developers to control the visibility of the worksheets in their Excel files.

Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a Worksheets collection that allows to access each worksheet in the Excel file.

A worksheet is represented by the Worksheet class. Worksheet class provides a wide range of properties and methods to manage a worksheet. But, to control the visibility of a worksheet, developers may use IsVisible property of the Worksheet class. IsVisible is a boolean property, which means that it can only store a true or false value. This example elaborates the use of this property according to his/her requirements.</Description>
                      <FolderName>HideUnhideWorksheet</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Hide or Unhide a Worksheet</DisplayName>
                        <Url>Hide+or+Unhide+a+Worksheet</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Display or Hide Tabs</Title>
                      <Description>Sheet Tabs are the tabs that represent all worksheets in the Excel file. You can click on any desired tab to switch to a particular worksheet. The more worksheets you have, the more sheet tabs will be created. If your Excel file has a good number of worksheets then you would also need some buttons to navigate through all of these sheet tabs.

Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class provides a wide range of properties and methods to manage an Excel file. But, to control the visibility of the tabs in the Excel file, developers may use ShowTabs property of the Workbook class. ShowTabs is a boolean property, which means that it can only store a true or false value. Developers can hide the tabs of the Excel file by setting the ShowTabs property of the Workbook class to false. In this example this is explained in detail.</Description>
                      <FolderName>DisplayHideTabs</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Display or Hide Tabs</DisplayName>
                        <Url>Display+or+Hide+Tabs</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Display or Hide Scroll Bars</Title>
                      <Description>Microsoft Excel also provides Horizontal &amp; Vertical Scroll Bars to scroll through the contents of the worksheets. Using Aspose.Cells, developers can control the visibility of both of these scroll bars in their Excel files. Developers can hide the vertical or horizontal scroll bars of the Excel file by setting the IsVScrollBarVisible or IsHScrollBarVisible property of the Workbook class to false. This example describes the use of this property in detail.</Description>
                      <FolderName>DisplayHideScrollBars</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Display or Hide Scroll Bars</DisplayName>
                        <Url>Display+or+Hide+Scroll+Bars</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Display or Hide Gridlines</Title>
                      <Description>All Excel worksheets have Gridlines by default, which helps us in entering data to particular cells of a worksheet. Gridlines enable us to view a worksheet as a collection of cells, where each cell is easily identifiable. Using, Aspose.Cells , developers can also control the visibility of the gridlines in their worksheets.

Developers can hide gridlines by setting the IsGridlinesVisible property of the Worksheet class to false. In this example this is explained in detail.</Description>
                      <FolderName>DisplayHideGridlines</FolderName>
                      <Order>4</Order>
                      <DocLink>
                        <DisplayName>Display or Hide Gridlines</DisplayName>
                        <Url>Display+or+Hide+Gridlines</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Page Break Preview</Title>
                      <Description>All worksheets can be viewed in two modes:

- Normal View
- Page Break Preview

Normal View is the default view of a worksheet that we normally experience while working on worksheets where as Page Break Preview is an editing view that displays a worksheet as it will print. Page Break Preview shows that what data will go on each page so, you can adjust the print area and page breaks. Using Aspose.Cells, developers can enable normal view or page break preview modes for their desired worksheets using IsPageBreakPreview property of the Worksheet class. IsPageBreakPreview is a boolean property, which means that it can only store a true or false value. This example describes the Page Break Preview in detail.</Description>
                      <FolderName>PageBreakPreview</FolderName>
                      <Order>5</Order>
                      <DocLink>
                        <DisplayName>Page Break Preview</DisplayName>
                        <Url>Page+Break+Preview</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Zoom Factor</Title>
                      <Description>Microsoft Excel provides a feature to set the Zoom or Scaling Factor of the worksheets. This feature helps users to see the contents of their worksheets in smaller or larger views. Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a Worksheets collection that allows to access each worksheet in the Excel file.
A worksheet is represented by the Worksheet class. Worksheet class provides a wide range of properties and methods to manage a worksheet. But, to set the zoom factor of a worksheet, developers may use Zoom property of the Worksheet class. Developers can assign a numeric (integer) value to the Zoom property as a zoom factor. This example explains the usage of Zoom property in detail.</Description>
                      <FolderName>ZoomFactor</FolderName>
                      <Order>6</Order>
                      <DocLink>
                        <DisplayName>Zoom Factor</DisplayName>
                        <Url>Zoom+Factor</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Display or Hide Row Column Headers</Title>
                      <Description>All worksheets in an Excel file are composed of cells that are arranged in the form of rows and columns. All rows and columns have unique values that are used to identify a particular row, column or cell. For example, rows are numbered as 1, 2, 3, 4 etc. and columns are ordered alphabetically as A, B, C, D etc. These values of the rows and columns are displayed as their headers. Rows and columns, both have their own row and column headers respectively. Using, Aspose.Cells , developers can control the visibility of these row/column headers in their worksheets.

Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a WorksheetCollection that allows to access each worksheet in the Excel file.
A worksheet is represented by the Worksheet class. Worksheet class provides a wide range of properties and methods to manage a worksheet. But, to control the visibility of row/column headers, developers may use setRowColumnHeadersVisible method of the Worksheet class.

Developers can hide row/column headers by using the setRowColumnHeadersVisible(false) method of the Worksheet class.

Developers can make row/column headers visible by using the setRowColumnHeadersVisible(true) method of the Worksheet class.</Description>
                      <FolderName>DisplayorHideRowColumnHeaders</FolderName>
                      <Order>7</Order>
                      <DocLink>
                        <DisplayName>Display or Hide Row Column Headers</DisplayName>
                        <Url>http://www.aspose.com/docs/display/cellsjava/Display+or+Hide+Row+Column+Headers</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\book.out.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Freeze Panes</Title>
                      <Description>Freeze Panes is also another good feature provided by Microsoft Excel. Freezing panes allows you to select data that remains visible when scrolling in a worksheet

Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a WorksheetCollection that allows to access each worksheet in the Excel file.

A worksheet is represented by the Worksheet class. Worksheet class provides a wide range of properties and methods to manage a worksheet.

But, to configure freeze panes settings for a worksheet, developers may call freezePanes method of the Worksheet class. FreezePanes method takes four parameters as follows:

- row , represents the row index of the cell from where to start freezing
- column , represents the column index of the cell from where to start freezing
- freezedRows , represents the number of visible rows in top pane
- freezedColumns , represents the number of visible columns in left pane</Description>
                      <FolderName>FreezePanes</FolderName>
                      <Order>8</Order>
                      <DocLink>
                        <DisplayName>Freeze Panes</DisplayName>
                        <Url>http://www.aspose.com/docs/display/cellsjava/Freeze+Panes</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\book.out.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Split Panes</Title>
                      <Description>If you need to split the screen to give you two different views into the same worksheet, you split panes. Excel offers a very handy feature to allow you view more than one copy of your worksheet, and for you to be able to scroll through each pane of your worksheet independently. You can do this by using a feature called Split Panes.
When you split panes. The panes of your worksheet work simultaneously. If you make a change in one, it will simultaneously appear in the other. Aspose.Cells provides Split Panes feature for the users.

Aspose.Cells provides a class Workbook that represents an Excel file. Workbook class provides a wide range of properties and methods to manage an Excel file. To implement split views, developers may use split method of the Worksheet class. To remove the splitted panes, you can use removeSplit method of the Worksheet class.</Description>
                      <FolderName>SplitPanes</FolderName>
                      <Order>9</Order>
                      <DocLink>
                        <DisplayName>Split Panes</DisplayName>
                        <Url>http://www.aspose.com/docs/display/cellsjava/Split+Panes</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\book.out.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
                <Folder>
                  <Title>Management Features</Title>
                  <Description>This section includes the following topics: 
Managing Worksheets</Description>
                  <FolderName>ManagementFeatures</FolderName>
                  <Order>2</Order>
                  <Folders>
                    <Folder>
                      <Title>Managing Worksheets</Title>
                      <Description>Developers can easily create and manage worksheets in their Excel files programmatically using the flexible API of Aspose.Cells. In this topic we will discuss some approaches to add and remove worksheets in Excel files.

Managing worksheets using Aspose.Cells is as easy as ABC. In this section, we will describe that how can we:

1. Create a new Excel file from scratch and add worksheet to it
2. Add worksheets to designer spreadsheets
3. Remove a worksheet from an Excel file using its sheet name
4. Remove a worksheet from an Excel file using its sheet index

Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a WorksheetCollection that allows to access each worksheet in the Excel file.

A worksheet is represented by the Worksheet class. Worksheet class provides a wide range of properties and methods to manage a worksheet. Let's see that how can we make use of these basic set of APIs.</Description>
                      <FolderName>ManagingWorksheets</FolderName>
                      <Order>1</Order>
                      <Examples>
                        <Example>
                          <Title>Adding Worksheets to a New Excel File</Title>
                          <Description>To create a new Excel file programmatically, developers would need to create an object of Workbook class that represents an Excel file. Then developers can call addSheet method of the WorksheetCollection . When we call add method, an empty worksheet is added to the Excel file automatically, which can be referenced by passing the sheet index of the newly added worksheet to the WorksheetCollection . After the worksheet reference is obtained, developers can work on their worksheets according to their requirements. After the work is done on the worksheets, developers can save their newly created Excel file with new worksheets by calling the save method of the Workbook class.</Description>
                          <FolderName>AddingWorksheetstoNewExcelFile</FolderName>
                          <Order>1</Order>
                          <DocLink>
                            <DisplayName>Adding Worksheets to a New Excel File</DisplayName>
                            <Url>http://www.aspose.com/docs/display/cellsjava/Managing+Worksheets</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book.out.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Adding Worksheets to a Designer Spreadsheet</Title>
                          <Description>The process of adding worksheets to a designer spreadsheet is entirely same as that of the above approach except that the Excel file is already created and we need to open that Excel file first before adding worksheet to it. A designer spreadsheet can be opened by calling the open method of the Workbook class.</Description>
                          <FolderName>AddingWorksheetstoDesignerSpreadsheet</FolderName>
                          <Order>2</Order>
                          <DocLink>
                            <DisplayName>Adding Worksheets to a Designer Spreadsheet</DisplayName>
                            <Url>http://www.aspose.com/docs/display/cellsjava/Managing+Worksheets</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\book.out.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Removing Worksheets using Sheet Name</Title>
                          <Description>Sometimes, developers may need to remove worksheets from existing Excel files and that task can be performed by calling the removeAt method of the WorksheetCollection collection. We can pass sheet name to the removeAt method to remove a specific worksheet.</Description>
                          <FolderName>RemovingWorksheetsusingSheetName</FolderName>
                          <Order>3</Order>
                          <DocLink>
                            <DisplayName>Removing Worksheets using Sheet Name</DisplayName>
                            <Url>http://www.aspose.com/docs/display/cellsjava/Managing+Worksheets</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\book.out.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Removing Worksheets using Sheet Index</Title>
                          <Description>The above approach of removing worksheets works well if developers already know the sheet names of the worksheets to be deleted. But, what if you don't know the sheet name of the worksheet that you want to remove from your Excel file?

Well, in such circumstances, developers can use an overloaded version of remove At method that takes the sheet index of the worksheet instead of its sheet name.</Description>
                          <FolderName>RemovingWorksheetsusingSheetIndex</FolderName>
                          <Order>4</Order>
                          <DocLink>
                            <DisplayName>Removing Worksheets using Sheet Index</DisplayName>
                            <Url>http://www.aspose.com/docs/display/cellsjava/Managing+Worksheets</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\book.out.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                      </Examples>
                    </Folder>
                  </Folders>
                </Folder>
              </Folders>
            </Folder>
            <Folder>
              <Title>Creating Charts</Title>
              <Description>This section includes examples related to the following topics: 

- Fundamental Features
- Chart Management Features
- Advanced Features</Description>
              <FolderName>CreatingCharts</FolderName>
              <Order>3</Order>
              <Folders>
                <Folder>
                  <Title>Fundamental Features</Title>
                  <Description>This section includes the following topics:
Introduction to Charts and Chart Types
How to Create a Chart
Change the Chart's Position and Size</Description>
                  <FolderName>FundamentalFeatures</FolderName>
                  <Order>1</Order>
                  <Examples>
                    <Example>
                      <Title>Change the Chart's Position and Size</Title>
                      <Description>Example shows the way to change the position or size of the new or existing chart inside the worksheet. Aspose.Cells provides the Chart.getChartObject() property to achieve this. You can use its sub-properties to re-size the chart with new height and width or re-position it with new X and Y coordinates.</Description>
                      <FolderName>ChangeChartPositionAndSize</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Change the Chart's Position and Size</DisplayName>
                        <Url>http://www.aspose.com/docs/display/cellsjava/Change+the+Chart%27s+Position+and+Size</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\book1.out.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>How to Create a Chart</Title>
                      <Description>Developers can add a variety of charts to their spreadsheets using Aspose.Cells. Aspose.Cells provides many charting objects that can be used to create charts in a flexible manner. The primary aim of this topic is to make developers familiar with the charting objects of Aspose.Cells so that they may create any kind of chart easily.

Aspose.Cells provides some special set of classes that are used to create all kinds of charts supported by Aspose.Cells. These classes are used to create Charting Objects , which act as the building blocks of a chart. 

All charting objects are the instances of their respective classes that provide specific properties and methods to perform specific tasks. Developers can use these charting objects to create charts according to their requirements.

Developers can add any type of chart to their worksheets using the Charts collection. Each item in the Charts collection represents a Chart object. A Chart object encapsulates all other Charting Objects that are required to customize the appearance of a chart. In our next section, we will learn the use of few basic charting objects to create a simple chart.

Developers can create many types of charts using Aspose.Cells. All types of standard charts supported by Aspose.Cells are pre-defined in an enumeration named as ChartType.

To create a chart using Aspose.Cells, please follow the steps below:

Add some data to worksheet cells by using the setValue method of a Cell object. This data will be used as a data source for the chart.
Add a chart to the worksheet by calling the add method of ChartCollection collection, which is encapsulated in the Worksheet object. You will also specify the type of chart to add in the worksheet using the ChartType enumeration. For example, in this example, we have selected ChartType.Pyramid value as a chart type.
Access the newly added Chart object from the ChartCollection collection by passing the chart index.
Use any of the Charting Objects (explained in the above section) encapsulated in the Chart object to manage your chart. For example, in this example, we have used SeriesCollection charting object to specify the data source for the chart.
When adding source data to chart, the data source can be a range of cells (such as "A1:C3"), or a sequence of non-contiguous cells (such as "A1, A3, A5"), or a sequence of values (such as "{1,2,3}").

When you assign a range of cells as data source, you can only set the range from top left to bottom right. For example, "A1:C3" is valid while "C3:A1" is invalid.

Using the above general steps, developers can create any type of chart in their spreadsheets. Developers can use different charting objects to create charts according to their custom requirements.</Description>
                      <FolderName>CreateChart</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>How to Create a Chart</DisplayName>
                        <Url>http://www.aspose.com/docs/display/cellsjava/How+to+Create+a+Chart</Url>
                      </DocLink>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\book1.out.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
                <Folder>
                  <Title>Chart Management Features</Title>
                  <Description>This section includes the following topics:
Setting Charts Appearance
Setting Charts Data</Description>
                  <FolderName>ChartManagementFeatures</FolderName>
                  <Order>2</Order>
                  <Examples>
                    <Example>
                      <Title>Setting Charts Data</Title>
                      <Description>This Example provides more details about the types of data that can be set for a chart.</Description>
                      <FolderName>SettingChartsData</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Setting Charts Data</DisplayName>
                        <Url>http://www.aspose.com/docs/display/cellsjava/Setting+Charts+Data</Url>
                      </DocLink>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\book1.out.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
              </Folders>
            </Folder>
            <Folder>
              <Title>Working with Rows and Columns</Title>
              <Description>This section includes the following topics:
- Inserting Deleting Rows and Columns
- Hiding Unhiding Rows and Columns
- Grouping Ungrouping Rows and Columns
- Adjusting Row Height and Column Width
- AutoFit Rows and Columns
- Copying Rows and Columns</Description>
              <FolderName>WorkingwithRowsandColumns</FolderName>
              <Order>4</Order>
              <Examples>
                <Example>
                  <Title>Inserting Rows and Columns</Title>
                  <Description>Whether we are creating a new worksheet from scratch or we are working on an existing worksheet, we may need to add extra rows or columns into the worksheet to accomodate more data or for some other reason. Inversely, it may also be required to delete rows or columns from specified positions of the worksheet. To fulfill these requirements, Aspose.Cells provides very simplest set of APIs.

Developers can insert a row into the worksheet at any location by calling the insertRows method of the Cells collection. insertRows method takes the index of the row where the new row will be inserted as the first argument and number of rows to be inserted as the second argument.

Sometimes, developers may need to insert multiple rows into the worksheet. It can be done by calling the insertRows method of the Cells collection. InsertRows method takes two parameters:

- Row Index , the index of the row from where the new rows will be inserted
- Number of Rows , total number of rows that need to be inserted

Developers can also insert a column into the worksheet at any location by calling the insertColumns method of the Cells collection. insertColumns method takes two parameters:

- Column Index , the index of the column from where the column will be inserted
- Number of Columns , total number of columns that need to be inserted</Description>
                  <FolderName>InsertingRowsandColumns</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Inserting Rows and Columns</DisplayName>
                    <Url>http://www.aspose.com/docs/display/cellsjava/Inserting+Deleting+Rows+and+Columns</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.xls</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.out.xls</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Deleting Rows and Columns</Title>
                  <Description>Whether we are creating a new worksheet from scratch or we are working on an existing worksheet, we may need to add extra rows or columns into the worksheet to accomodate more data or for some other reason. Inversely, it may also be required to delete rows or columns from specified positions of the worksheet. To fulfill these requirements, Aspose.Cells provides very simplest set of APIs.

Developers can delete a row from the worksheet at any location by calling the deleteRows method of the Cells collection. DeleteRows method takes two parameters:

- Row Index , the index of the row from where the rows will be deleted
- Number of Rows , total number of rows that need to be deleted

To delete a column from the worksheet at any location, developers can call deleteColumns method of the Cells collection. deleteColumns method takes three parameters.

- Column Index , the index of the column from where the column will be deleted
- Number of Columns , total number of columns that need to be deleted
- Shift Cells, Boolean parameter to indicate whether to shift the cells left after deletion.

If developers need to delete multiple rows from the worksheet. It can also be done by calling the deleteRows method of the Cells collection. DeleteRows method takes two parameters:

- Row Index , the index of the row from where the rows will be deleted
- Number of Rows , total number of rows that need to be deleted</Description>
                  <FolderName>DeletingRowsandColumns</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Deleting Rows and Columns</DisplayName>
                    <Url>http://www.aspose.com/docs/display/cellsjava/Inserting+Deleting+Rows+and+Columns</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.xls</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.out.xls</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Hiding Rows and Columns</Title>
                  <Description>Sometimes, it may also be required by users to hide certain rows or columns of the worksheet and then display them later. Microsoft Excel provides this feature and so as Aspose.Cells.

Controlling the Visibility of Rows &amp; Columns:
Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a WorksheetCollection that allows to access each worksheet in the Excel file. A worksheet is represented by the Worksheet class. Worksheet class provides a Cells collection that represents all cells in the worksheet.

Cells collection provides several methods to manage rows or columns in a worksheet, few of these are discussed below in more detail.

Developers can hide a row or column by calling the HideRow and HideColumn methods of the Cells collection respectively. Both methods take the row/column index as a parameter to hide the specific row or column.</Description>
                  <FolderName>HidingRowsandColumns</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Hiding Rows and Columns</DisplayName>
                    <Url>http://www.aspose.com/docs/display/cellsjava/Hiding+Unhiding+Rows+and+Columns</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.xls</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.out.xls</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Unhiding Rows and Columns</Title>
                  <Description>Developers can unhide any hidden row or column by calling the UnhideRow and UnhideColumn methods of the Cells collection respectively. Both methods take two parameters:

- Row/Column Index , represents the index of a row or column that is used to unhide the specific row or column
- Row Height/Column Width , represents row height or column width that can assigned to the row or column after unhiding</Description>
                  <FolderName>UnhidingRowsandColumns</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Unhiding Rows and Columns</DisplayName>
                    <Url>http://www.aspose.com/docs/display/cellsjava/Hiding+Unhiding+Rows+and+Columns</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.xls</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.out.xls</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Grouping Rows and Columns</Title>
                  <Description>In an Excel file, you can create an outline for your data to let you show and hide levels of detail with a single mouse click. You can click the Outline Symbols , 1,2,3 , + and - to quickly display only the rows or columns that provide summaries or headings for sections of your worksheet or you can use the symbols to see details under an individual summary or heading.

Group Management of Rows &amp; Columns
Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a WorksheetCollection that allows to access each worksheet in the Excel file. A worksheet is represented by the Worksheet class. Worksheet class provides a Cells collection that represents all cells in the worksheet.

Cells collection provides several methods to manage rows or columns in a worksheet, few of these are discussed below in more detail.

Grouping Rows &amp; Columns
Developers can group rows or columns by calling the groupRows and groupColumns methods of the Cells collection respectively. Both methods take three parameters as follows:

- First Row/Column Index , represents the first row/column index to be grouped
- Last Row/Column Index , represents the last row/column index to be grouped
- Is Hidden , a boolean parameter to specify that whether to hide rows/columns after grouping or not</Description>
                  <FolderName>GroupingRowsandColumns</FolderName>
                  <Order>5</Order>
                  <DocLink>
                    <DisplayName>Grouping Rows and Columns</DisplayName>
                    <Url>http://www.aspose.com/docs/display/cellsjava/Grouping+Ungrouping+Rows+and+Columns</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.xls</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.out.xls</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Ungrouping Rows and Columns</Title>
                  <Description>Ungrouping Rows &amp; Columns
Developers can ungroup any grouped rows or columns by calling the UngroupRows and UngroupColumns methods of the Cells collection respectively. Both methods take two parameters:

- First Row/Column Index , represents the first row/column index to be ungrouped
- Last Row/Column Index , represents the last row/column index to be ungrouped</Description>
                  <FolderName>UngroupingRowsandColumns</FolderName>
                  <Order>6</Order>
                  <DocLink>
                    <DisplayName>Ungrouping Rows and Columns</DisplayName>
                    <Url>http://www.aspose.com/docs/display/cellsjava/Grouping+Ungrouping+Rows+and+Columns</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.xls</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.out.xls</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Adjusting Row Height and Column Width</Title>
                  <Description>When we work with spreadsheets and add data to rows or columns, we might need to increase or decrease the height of the rows or width of the columns. Sometimes, just because of applying some formatting settings on the rows or columns, we also may need to do so. Normally, you adjust your row heights and column widths in a WYSIWYG environment using Microsoft Excel. But, Aspose.Cells gives you the power to perform these operations at runtime.

Adjusting Row Height
Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a WorksheetCollection that allows to access each worksheet in the Excel file. A worksheet is represented by the Worksheet class. Worksheet class provides a Cells collection that represents all cells in the worksheet.

Cells collection provides several methods to manage rows or columns in a worksheet

Developers can set the height of a single row by calling setRowHeight method of the Cells collection. setRowHeight method takes two parameters as follows:

- Row Index , represents the index of the row whose height is needed to change
- Row Height , represents the desired row height to apply on the row

Setting the Height of All Rows in a Worksheet
If developers need to set the same row height for all rows in the worksheet, they can do it by using the set StandardHeight method of the Cells collection.

Developers can set the width of a column by calling s etColumnWidth method of the Cells collection. setColumnWidth method takes two parameters as follows:

- Column Index , represents the index of the column whose width is needed to change
- Column Width , represents the desired column width to apply on the column

Setting the Width of All Columns in a Worksheet
If developers need to set the same column width for all columns in the worksheet, they can do it by using the setStandardWidth method of the Cells collection.</Description>
                  <FolderName>AdjustingRowHeightandColumnWidth</FolderName>
                  <Order>7</Order>
                  <DocLink>
                    <DisplayName>Adjusting Row Height and Column Width</DisplayName>
                    <Url>http://www.aspose.com/docs/display/cellsjava/Adjusting+Row+Height+and+Column+Width</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.xls</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.output.xls</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>AutoFit Rows and Columns</Title>
                  <Description>Microsoft Excel provides a good feature to Auto Size the width and height of a cell according to its content. This feature is also available to Aspose.Cells users with the power of auto sizing the dimensions of a cell at runtime.

AutoFitting the Contents
Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a WorksheetCollection that allows to access each worksheet in the Excel file.

A worksheet is represented by the Worksheet class. Worksheet class provides a wide range of properties and methods to manage a worksheet. But, in this topic, we will see that how can we use Worksheet class to AutoFit rows or columns.

AutoFit Row - Simple
The most simple approach of auto-sizing the width and height of a row is to call the autoFitRow method of the Worksheet class. autoFitRow method takes the row index (of the row whose auto-sizing is desired) as a parameter.

AutoFit Column - Simple
The simplest approach of auto-sizing the width and height of a column is to call the autoFitColumn method of the Worksheet class. autoFitColumn method takes the column index (of the column whose auto-sizing is desired) as a parameter.</Description>
                  <FolderName>AutoFitRowsandColumns</FolderName>
                  <Order>9</Order>
                  <DocLink>
                    <DisplayName>AutoFit Rows and Columns</DisplayName>
                    <Url>http://www.aspose.com/docs/display/cellsjava/AutoFit+Rows+and+Columns</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.xls</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.out.xls</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Copying Rows and Columns</Title>
                  <Description>Sometimes, you 'll need to copy rows and columns in a worksheet without copying the entire worksheet. Aspose.Cells has this ability to copy rows and columns within or between workbooks. When you copy a row / column, it will copy all the data that the row / column contains, including formulas (with updated reference) and their resulting values, comments, cell formats, hidden cells, images and other drawing objects etc with high degree of accuracy and precision.

Using MS Excel - Copying Rows and Columns:
- Select the row or column that you want to copy.
- To copy rows or columns, click Copy on the Standard toolbar, or press CTRL+C .
- Select a row or column below or to the right of where you want to copy your selection.
- When you are copying rows or columns, click Copied Cells on the Insert menu.
Note If you click Paste on the Standard toolbar or press CTRL+V instead of clicking a command on the Insert menu, you will replace any contents of the destination cells.

Using Aspose.Cells - Copying Rows
Aspose.Cells provides copyRow method of the Cells class, this method copies all types of data including formulas (with updated reference) and their resulting values, comments, cell formats, hidden cells, images and other drawing objects etc. from the source row to the destination row. This method takes three parameters i.e. source Cells object, source row index and destination row index. You may utilize this method to copy a row within a workbook sheets or to another workbook sheets. The copyRow method works in the similar way as MS Excel. So, you don't really need to set row height for the destination row as per the source row height, the destination row height would be of same to the source row height.</Description>
                  <FolderName>CopyingRowsandColumns</FolderName>
                  <Order>10</Order>
                  <DocLink>
                    <DisplayName>Copying Rows and Columns</DisplayName>
                    <Url>http://www.aspose.com/docs/display/cellsjava/Copying+Rows+and+Columns</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.xls</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.out.xls</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>AutoFit Rows and Columns in a Range of Cells</Title>
                  <Description>AutoFit Row in a Range of Cells
We know that one row is composed of many columns/cells. Aspose.Cells also allows developers to auto-fit a row based on the content in a range of cells within the row by calling an overloaded version of autoFitRow method that takes three parameters as follows:

- Row Index , represents the index of the row whose contents need to auto-fit
- First Column Index , represents the index of the first column of the row
- Last Column Index , represents the index of the last column of the row
This method will check the contents of all columns in the row and then auto-fit the row.

AutoFit Column in a Range of Cells
One column is composed of many rows/cells. Developers can auto-fit a column based on the content in a range of cells within the column by calling an overloaded version of autoFitColumn method that takes three parameters as follows:

- Column Index , represents the index of the column whose contents need to auto-fit
- First Row Index , represents the index of the first row of the column
- Last Row Index , represents the index of the last row of the column
This method will check the contents of all rows in the column and then auto-fit the column.

Important to Know
If a cell is merged then AutoFit methods will not be applied on that cell, which is same as that of Microsoft Excel. Moreover, if a cell's text is wrapped, AutFitColumn method will not be applied on it also. Another important thing to know is that AutoFit methods are time consuming methods. So, you should call these methods as less as possible to ensure your application's efficiency..</Description>
                  <FolderName>AutoFitRowsandColumnsinaRangeofCells</FolderName>
                  <Order>8</Order>
                  <DocLink>
                    <DisplayName>AutoFit Rows and Columns in a Range of Cells</DisplayName>
                    <Url>http://www.aspose.com/docs/display/cellsjava/AutoFit+Rows+and+Columns</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.xls</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\workbook.out.xls</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
          </Folders>
        </Folder>
      </Folders>
    </Folder>
  </Folders>
</Data>